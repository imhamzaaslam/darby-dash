/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    'root': RouteRecordInfo<'root', '/', Record<never, never>, Record<never, never>>,
    '$error': RouteRecordInfo<'$error', '/:error(.*)', { error: ParamValue<true> }, { error: ParamValue<false> }>,
    'account-setting': RouteRecordInfo<'account-setting', '/account-setting', Record<never, never>, Record<never, never>>,
    'company-dashboard': RouteRecordInfo<'company-dashboard', '/company-dashboard', Record<never, never>, Record<never, never>>,
    'errors-authorization-error': RouteRecordInfo<'errors-authorization-error', '/errors/authorization-error', Record<never, never>, Record<never, never>>,
    'forgot-password': RouteRecordInfo<'forgot-password', '/forgot-password', Record<never, never>, Record<never, never>>,
    'login': RouteRecordInfo<'login', '/login', Record<never, never>, Record<never, never>>,
    'logout': RouteRecordInfo<'logout', '/logout', Record<never, never>, Record<never, never>>,
    'marketplace': RouteRecordInfo<'marketplace', '/marketplace', Record<never, never>, Record<never, never>>,
    'marketplace-detail': RouteRecordInfo<'marketplace-detail', '/marketplace/detail', Record<never, never>, Record<never, never>>,
    'projects-partials-add-payment-drawer': RouteRecordInfo<'projects-partials-add-payment-drawer', '/projects/_partials/add-payment-drawer', Record<never, never>, Record<never, never>>,
    'projects-partials-filter-members-drawer': RouteRecordInfo<'projects-partials-filter-members-drawer', '/projects/_partials/filter-members-drawer', Record<never, never>, Record<never, never>>,
    'projects-partials-team-grid-skeleton': RouteRecordInfo<'projects-partials-team-grid-skeleton', '/projects/_partials/team-grid-skeleton', Record<never, never>, Record<never, never>>,
    'projects-partials-team-list-skeleton': RouteRecordInfo<'projects-partials-team-list-skeleton', '/projects/_partials/team-list-skeleton', Record<never, never>, Record<never, never>>,
    'projects-bucks': RouteRecordInfo<'projects-bucks', '/projects/bucks', Record<never, never>, Record<never, never>>,
    'projects-calendar': RouteRecordInfo<'projects-calendar', '/projects/calendar', Record<never, never>, Record<never, never>>,
    'projects-chat': RouteRecordInfo<'projects-chat', '/projects/chat', Record<never, never>, Record<never, never>>,
    'projects-files': RouteRecordInfo<'projects-files', '/projects/files', Record<never, never>, Record<never, never>>,
    'projects-milestones': RouteRecordInfo<'projects-milestones', '/projects/milestones', Record<never, never>, Record<never, never>>,
    'projects-payments': RouteRecordInfo<'projects-payments', '/projects/payments', Record<never, never>, Record<never, never>>,
    'projects-team': RouteRecordInfo<'projects-team', '/projects/team', Record<never, never>, Record<never, never>>,
    'projects-web-designs': RouteRecordInfo<'projects-web-designs', '/projects/web-designs', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-add-project-drawer': RouteRecordInfo<'projects-web-designs-partials-add-project-drawer', '/projects/web-designs/_partials/add-project-drawer', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-add-project-tasks': RouteRecordInfo<'projects-web-designs-partials-add-project-tasks', '/projects/web-designs/_partials/addProjectTasks', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-file-viewer': RouteRecordInfo<'projects-web-designs-partials-file-viewer', '/projects/web-designs/_partials/file-viewer', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-filter-projects-drawer': RouteRecordInfo<'projects-web-designs-partials-filter-projects-drawer', '/projects/web-designs/_partials/filter-projects-drawer', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-filter-task-drawer': RouteRecordInfo<'projects-web-designs-partials-filter-task-drawer', '/projects/web-designs/_partials/filter-task-drawer', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-grid-view-skeleton': RouteRecordInfo<'projects-web-designs-partials-grid-view-skeleton', '/projects/web-designs/_partials/grid-view-skeleton', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-id': RouteRecordInfo<'projects-web-designs-partials-id', '/projects/web-designs/_partials/id', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-list-view-skeleton': RouteRecordInfo<'projects-web-designs-partials-list-view-skeleton', '/projects/web-designs/_partials/list-view-skeleton', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-save-template-modal': RouteRecordInfo<'projects-web-designs-partials-save-template-modal', '/projects/web-designs/_partials/save-template-modal', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-sort-lists-modal': RouteRecordInfo<'projects-web-designs-partials-sort-lists-modal', '/projects/web-designs/_partials/sort-lists-modal', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-update-project-drawer': RouteRecordInfo<'projects-web-designs-partials-update-project-drawer', '/projects/web-designs/_partials/update-project-drawer', Record<never, never>, Record<never, never>>,
    'projects-web-designs-partials-update-project-task-drawer': RouteRecordInfo<'projects-web-designs-partials-update-project-task-drawer', '/projects/web-designs/_partials/update-project-task-drawer', Record<never, never>, Record<never, never>>,
    'reset-password': RouteRecordInfo<'reset-password', '/reset-password', Record<never, never>, Record<never, never>>,
    'roles': RouteRecordInfo<'roles', '/roles', Record<never, never>, Record<never, never>>,
    'roles-partials-role-management-dialog': RouteRecordInfo<'roles-partials-role-management-dialog', '/roles/_partials/RoleManagementDialog', Record<never, never>, Record<never, never>>,
    'roles-partials-user-list-dialogue': RouteRecordInfo<'roles-partials-user-list-dialogue', '/roles/_partials/UserListDialogue', Record<never, never>, Record<never, never>>,
    'settings-services': RouteRecordInfo<'settings-services', '/settings/services', Record<never, never>, Record<never, never>>,
    'settings-services-partials-add-service-drawer': RouteRecordInfo<'settings-services-partials-add-service-drawer', '/settings/services/_partials/add-service-drawer', Record<never, never>, Record<never, never>>,
    'settings-services-partials-sort-service-modal': RouteRecordInfo<'settings-services-partials-sort-service-modal', '/settings/services/_partials/sort-service-modal', Record<never, never>, Record<never, never>>,
    'settings-services-partials-update-service-drawer': RouteRecordInfo<'settings-services-partials-update-service-drawer', '/settings/services/_partials/update-service-drawer', Record<never, never>, Record<never, never>>,
    'settings-templates': RouteRecordInfo<'settings-templates', '/settings/templates', Record<never, never>, Record<never, never>>,
    'settings-templates-partials-manage-templates': RouteRecordInfo<'settings-templates-partials-manage-templates', '/settings/templates/_partials/manage-templates', Record<never, never>, Record<never, never>>,
    'settings-templates-partials-sort-list-modal': RouteRecordInfo<'settings-templates-partials-sort-list-modal', '/settings/templates/_partials/sort-list-modal', Record<never, never>, Record<never, never>>,
    'settings-templates-partials-update-template-task-drawer': RouteRecordInfo<'settings-templates-partials-update-template-task-drawer', '/settings/templates/_partials/update-template-task-drawer', Record<never, never>, Record<never, never>>,
    'super-admin-companies': RouteRecordInfo<'super-admin-companies', '/super-admin/companies', Record<never, never>, Record<never, never>>,
    'super-admin-companies-partials-add-company': RouteRecordInfo<'super-admin-companies-partials-add-company', '/super-admin/companies/_partials/add-company', Record<never, never>, Record<never, never>>,
    'super-admin-companies-partials-company-settings': RouteRecordInfo<'super-admin-companies-partials-company-settings', '/super-admin/companies/_partials/company-settings', Record<never, never>, Record<never, never>>,
    'super-admin-companies-partials-filter-companies-drawer': RouteRecordInfo<'super-admin-companies-partials-filter-companies-drawer', '/super-admin/companies/_partials/filter-companies-drawer', Record<never, never>, Record<never, never>>,
    'super-admin-companies-partials-grid-view-skeleton': RouteRecordInfo<'super-admin-companies-partials-grid-view-skeleton', '/super-admin/companies/_partials/grid-view-skeleton', Record<never, never>, Record<never, never>>,
    'super-admin-companies-partials-list-view-skeleton': RouteRecordInfo<'super-admin-companies-partials-list-view-skeleton', '/super-admin/companies/_partials/list-view-skeleton', Record<never, never>, Record<never, never>>,
    'super-dashboard': RouteRecordInfo<'super-dashboard', '/super-dashboard', Record<never, never>, Record<never, never>>,
    'teams': RouteRecordInfo<'teams', '/teams', Record<never, never>, Record<never, never>>,
    'teams-partials-add-member-drawer': RouteRecordInfo<'teams-partials-add-member-drawer', '/teams/_partials/add-member-drawer', Record<never, never>, Record<never, never>>,
    'teams-partials-filter-members-drawer': RouteRecordInfo<'teams-partials-filter-members-drawer', '/teams/_partials/filter-members-drawer', Record<never, never>, Record<never, never>>,
    'teams-partials-grid-view-skeleton': RouteRecordInfo<'teams-partials-grid-view-skeleton', '/teams/_partials/grid-view-skeleton', Record<never, never>, Record<never, never>>,
    'teams-partials-list-view-skeleton': RouteRecordInfo<'teams-partials-list-view-skeleton', '/teams/_partials/list-view-skeleton', Record<never, never>, Record<never, never>>,
    'teams-partials-update-member-drawer': RouteRecordInfo<'teams-partials-update-member-drawer', '/teams/_partials/update-member-drawer', Record<never, never>, Record<never, never>>,
    'two-factor-auth': RouteRecordInfo<'two-factor-auth', '/TwoFactorAuth', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
